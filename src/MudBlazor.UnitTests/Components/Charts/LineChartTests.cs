// Copyright (c) MudBlazor 2021
// MudBlazor licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Collections.Generic;
using System.Linq;
using FluentAssertions;
using MudBlazor.Charts;
using MudBlazor.UnitTests.Components;
using NUnit.Framework;
using Bunit;

namespace MudBlazor.UnitTests.Charts
{
    public class LineChartTests: BunitTest
    {
        private readonly string[] _baseChartPalette = 
        {
            "#2979FF", "#1DE9B6", "#FFC400", "#FF9100", "#651FFF", "#00E676", "#00B0FF", "#26A69A", "#FFCA28",
            "#FFA726", "#EF5350", "#EF5350", "#7E57C2", "#66BB6A", "#29B6F6", "#FFA000", "#F57C00", "#D32F2F",
            "#512DA8", "#616161"
        };
        
        private readonly string[] _modifiedPalette =
        {
            "#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"
        };
        
        private static Array GetInterpolationOptions()
        {
            return Enum.GetValues(typeof(InterpolationOption));
        }
        
        [SetUp]
        public void Init()
        {
 
        }

        [Test]
        public void LineChartEmptyData()
        {
            var comp = Context.RenderComponent<Bar>();
            comp.Markup.Should().Contain("mud-chart");
        }

        [Theory]
        [TestCaseSource("GetInterpolationOptions")]
        public void LineChartExampleData(InterpolationOption opt)
        {
            List<ChartSeries> chartSeries = new List<ChartSeries>()
            {
                new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
                new ChartSeries() { Name = "Series 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
            };
            string[] xAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
            
            var comp = Context.RenderComponent<MudChart>(parameters => parameters
                .Add(p => p.ChartType, ChartType.Line)
                .Add(p => p.Height, "350px")
                .Add(p => p.Width, "100%")
                .Add(p => p.ChartSeries, chartSeries)
                .Add(p => p.XAxisLabels, xAxisLabels)
                .Add(p => p.ChartOptions, new ChartOptions { ChartPalette = _baseChartPalette, InterpolationOption = opt}));

            comp.Instance.ChartSeries.Should().NotBeEmpty();
            
            comp.Markup.Should().Contain("class=\"mud-charts-xaxis\"");
            comp.Markup.Should().Contain("class=\"mud-charts-yaxis\"");
            comp.Markup.Should().Contain("mud-chart-legend-item");
            
            if (chartSeries.Count <= 3)
            {
                comp.Markup.Should().
                    Contain("Series 1").And.Contain("Series 2");
            }

            if (chartSeries.FirstOrDefault(x => x.Name == "Series 1") is not null)
            {
                switch (opt)
                {
                    case InterpolationOption.NaturalSpline:
                        comp.Markup.Should().Contain("d=\"M 30 132.14285714285717 L 37.28395061728395 134.63899418788137 L 44.5679012345679 137.12670734273092 L 51.851851851851855 139.59757271723123 L 59.135802469135804 142.04316642120767 L 66.41975308641975 144.4550645644856 L 73.70370370370371 146.82484325689038 L 80.98765432098766 149.14407860824744 L 88.27160493827161 151.40434672838208 L 95.55555555555556 153.5972237271197 L 102.8395061728395 155.71428571428572 L 110.12345679012346 157.74696126130866 L 117.40740740740742 159.6860887860299 L 124.69135802469137 161.52235916789397 L 131.97530864197532 163.2464632863455 L 139.25925925925927 164.84909202082898 L 146.54320987654322 166.32093625078898 L 153.82716049382717 167.6526868556701 L 161.11111111111111 168.83503471491693 L 168.39506172839506 169.8586707079739 L 175.679012345679 170.71428571428572 L 182.96296296296296 171.4017321954555 L 190.2469135802469 171.95750894172104 L 197.53086419753086 172.42727632547866 L 204.81481481481484 172.8566947191248 L 212.0987654320988 173.2914244950558 L 219.38271604938274 173.77712602566803 L 226.66666666666669 174.3594596833579 L 233.95061728395063 175.08408584052177 L 241.23456790123458 175.99666486955607 L 248.51851851851853 177.14285714285717 L 255.80246913580248 178.5489670997265 L 263.08641975308643 180.16387544708607 L 270.3703703703704 181.91710695876293 L 277.65432098765433 183.73818640858408 L 284.9382716049383 185.55663857037666 L 292.22222222222223 187.30198821796762 L 299.5061728395062 188.90376012518414 L 306.7901234567901 190.29147906585317 L 314.0740740740741 191.3946698138018 L 321.358024691358 192.14285714285717 L 328.641975308642 192.49311369135285 L 335.9259259259259 192.5127035556491 L 343.2098765432099 192.2964386966127 L 350.4938271604938 191.93913107511045 L 357.77777777777777 191.53559265200929 L 365.0617283950617 191.1806353881759 L 372.34567901234567 190.9690712444772 L 379.6296296296297 190.99571218177994 L 386.9135802469136 191.355370160951 L 394.1975308641976 192.14285714285717 L 401.4814814814815 193.41572099200508 L 408.7654320987655 195.08245318746057 L 416.0493827160494 197.01428111192934 L 423.33333333333337 199.082432148117 L 430.6172839506173 201.15813367872926 L 437.90123456790127 203.11261308647175 L 445.1851851851852 204.81709775405008 L 452.46913580246917 206.14281506417004 L 459.7530864197531 206.96099239953713 L 467.03703703703707 207.14285714285717 L 474.320987654321 206.5997166263413 L 481.60493827160496 205.40319798022307 L 488.8888888888889 203.66500828424154 L 496.17283950617286 201.49685461813593 L 503.4567901234568 199.0104440616453 L 510.74074074074076 196.31748369450875 L 518.0246913580247 193.52968059646543 L 525.3086419753087 190.75874184725438 L 532.5925925925926 188.11637452661478 L 539.8765432098766 185.71428571428572 L 547.1604938271605 183.63969821691566 L 554.4444444444445 181.88189774879024 L 561.7283950617284 180.40568575110458 L 569.0123456790124 179.17586366505367 L 576.2962962962963 178.15723293183254 L 583.5802469135803 177.31459499263624 L 590.8641975308642 176.61275128865984 L 598.1481481481482 176.01650326109828 L 605.4320987654321 175.49065235114665 L 612.716049382716 175\"");
                        break;
                    case InterpolationOption.Straight:
                        comp.Markup.Should()
                            .Contain("d=\"M 30 132.14285714285717 L 103.75 155.71428571428572 L 177.5 170.71428571428572 L 251.25 177.14285714285717 L 325 192.14285714285717 L 398.75 192.14285714285717 L 472.5 207.14285714285717 L 546.25 185.71428571428572 L 620 175\"");
                        break;
                    case InterpolationOption.EndSlope:
                        comp.Markup.Should().Contain("d=\"M 30 132.14285714285717 L 37.28395061728395 132.55576070376605 L 44.5679012345679 133.7157205975174 L 51.851851851851855 135.50461064064805 L 59.135802469135804 137.80430464969496 L 66.41975308641975 140.49667644119504 L 73.70370370370371 143.46359983168526 L 80.98765432098766 146.5869486377025 L 88.27160493827161 149.74859667578374 L 95.55555555555556 152.83041776246583 L 102.8395061728395 155.71428571428572 L 110.12345679012346 158.30511085104146 L 117.40740740740742 160.59994950557544 L 124.69135802469137 162.61889451399117 L 131.97530864197532 164.3820387123922 L 139.25925925925927 165.90947493688196 L 146.54320987654322 167.22129602356407 L 153.82716049382717 168.33759480854198 L 161.11111111111111 169.27846412791922 L 168.39506172839506 170.06399681779928 L 175.679012345679 170.71428571428572 L 182.96296296296296 171.2523673206396 L 190.2469135802469 171.7130528087524 L 197.53086419753086 172.13409701767307 L 204.81481481481484 172.55325478645065 L 212.0987654320988 173.00828095413425 L 219.38271604938274 173.5369303597728 L 226.66666666666669 174.17695784241533 L 233.95061728395063 174.9661182411109 L 241.23456790123458 175.9421663949085 L 248.51851851851853 177.14285714285717 L 255.80246913580248 178.58827700925733 L 263.08641975308643 180.22783925941513 L 270.3703703703704 181.99328884388808 L 277.65432098765433 183.8163707132338 L 284.9382716049383 185.62882981800968 L 292.22222222222223 187.36241110877341 L 299.5061728395062 188.9488595360825 L 306.7901234567901 190.31992005049446 L 314.0740740740741 191.40733760256683 L 321.358024691358 192.14285714285717 L 328.641975308642 192.48523892804548 L 335.9259259259259 192.5013044393015 L 343.2098765432099 192.28489046391755 L 350.4938271604938 191.92983378918578 L 357.77777777777777 191.5299712023985 L 365.0617283950617 191.17913949084792 L 372.34567901234567 190.97117544182626 L 379.6296296296297 190.99991584262574 L 386.9135802469136 191.35919748053863 L 394.1975308641976 192.14285714285717 L 401.4814814814815 193.4079101357038 L 408.7654320987655 195.06408584052178 L 416.0493827160494 196.9842921575847 L 423.33333333333337 199.041436987166 L 430.6172839506173 201.10842822953927 L 437.90123456790127 203.05817378497792 L 445.1851851851852 204.76358155375553 L 452.46913580246917 206.0975594361456 L 459.7530864197531 206.93301533242166 L 467.03703703703707 207.14285714285717 L 474.320987654321 206.6388348148538 L 481.60493827160496 205.4880664843257 L 488.8888888888889 203.7965123343152 L 496.17283950617286 201.67013254786454 L 503.4567901234568 199.214887308016 L 510.74074074074076 196.53673679781193 L 518.0246913580247 193.74164120029457 L 525.3086419753087 190.9355606985062 L 532.5925925925926 188.22445547548918 L 539.8765432098766 185.71428571428572 L 547.1604938271605 183.49103631916685 L 554.4444444444445 181.56079107931836 L 561.7283950617284 179.90965850515462 L 569.0123456790124 178.52374710709026 L 576.2962962962963 177.38916539553966 L 583.5802469135803 176.4920218809173 L 590.8641975308642 175.8184250736377 L 598.1481481481482 175.3544834841153 L 605.4320987654321 175.08630562276457 L 612.716049382716 175\"");
                    break;
                    case InterpolationOption.Periodic:
                        comp.Markup.Should().Contain("d=\"M 30 132.14285714285717 L 37.28395061728395 135.18257653061227 L 44.5679012345679 138.01673469387757 L 51.851851851851855 140.66553571428574 L 59.135802469135804 143.1491836734694 L 66.41975308641975 145.48788265306123 L 73.70370370370371 147.70183673469387 L 80.98765432098766 149.81125 L 88.27160493827161 151.83632653061224 L 95.55555555555556 153.79727040816329 L 102.8395061728395 155.71428571428572 L 110.12345679012346 157.60137755102042 L 117.40740740740742 159.4477551020408 L 124.69135802469137 161.23642857142858 L 131.97530864197532 162.95040816326534 L 139.25925925925927 164.57270408163265 L 146.54320987654322 166.08632653061224 L 153.82716049382717 167.47428571428574 L 161.11111111111111 168.71959183673468 L 168.39506172839506 169.80525510204083 L 175.679012345679 170.71428571428572 L 182.96296296296296 171.44048469387758 L 190.2469135802469 172.02081632653062 L 197.53086419753086 172.50303571428572 L 204.81481481481484 172.93489795918367 L 212.0987654320988 173.3641581632653 L 219.38271604938274 173.83857142857144 L 226.66666666666669 174.40589285714285 L 233.95061728395063 175.11387755102044 L 241.23456790123458 176.01028061224494 L 248.51851851851853 177.14285714285717 L 255.80246913580248 178.53954081632656 L 263.08641975308643 180.14897959183676 L 270.3703703703704 181.90000000000003 L 277.65432098765433 183.72142857142862 L 284.9382716049383 185.5420918367347 L 292.22222222222223 187.29081632653063 L 299.5061728395062 188.8964285714286 L 306.7901234567901 190.28775510204085 L 314.0740740740741 191.3936224489796 L 321.358024691358 192.14285714285717 L 328.641975308642 192.49206632653062 L 335.9259259259259 192.50897959183675 L 343.2098765432099 192.28910714285718 L 350.4938271604938 191.92795918367347 L 357.77777777777777 191.52104591836735 L 365.0617283950617 191.16387755102042 L 372.34567901234567 190.95196428571433 L 379.6296296296297 190.98081632653066 L 386.9135802469136 191.34594387755106 L 394.1975308641976 192.14285714285717 L 401.4814814814815 193.42933673469392 L 408.7654320987655 195.11224489795921 L 416.0493827160494 197.0607142857143 L 423.33333333333337 199.1438775510204 L 430.6172839506173 201.2308673469388 L 437.90123456790127 203.19081632653064 L 445.1851851851852 204.89285714285717 L 452.46913580246917 206.2061224489796 L 459.7530864197531 206.9997448979592 L 467.03703703703707 207.14285714285717 L 474.320987654321 206.5463010204082 L 481.60493827160496 205.28775510204082 L 488.8888888888889 203.48660714285717 L 496.17283950617286 201.26224489795922 L 503.4567901234568 198.734056122449 L 510.74074074074076 196.0214285714286 L 518.0246913580247 193.24375000000003 L 525.3086419753087 190.52040816326533 L 532.5925925925926 187.97079081632654 L 539.8765432098766 185.71428571428572 L 547.1604938271605 183.8397448979592 L 554.4444444444445 182.3138775510204 L 561.7283950617284 181.07285714285715 L 569.0123456790124 180.05285714285716 L 576.2962962962963 179.19005102040816 L 583.5802469135803 178.42061224489797 L 590.8641975308642 177.6807142857143 L 598.1481481481482 176.90653061224492 L 605.4320987654321 176.03423469387755 L 612.716049382716 175\"");
                        break;
                }
            }

            if (comp.Instance.ChartOptions.InterpolationOption == InterpolationOption.Straight && chartSeries.FirstOrDefault(x => x.Name == "Series 2") is not null)
            {
                comp.Markup.Should()
                    .Contain("d=\"M 30 306.25 L 103.75 248.125 L 177.5 259.375 L 251.25 229.375 L 325 233.125 L 398.75 208.75 L 472.5 195.625 L 546.25 154.375 L 620 47.5\"");
            }
            
            comp.SetParametersAndRender(parameters => parameters
                .Add(p => p.ChartOptions, new ChartOptions(){ChartPalette = _modifiedPalette}));

            comp.Markup.Should().Contain(_modifiedPalette[0]);
        }
    }
}
